include:
    - project: 'devops/svd/ci-templates'
      ref: 2.2.3
      file: '/full_ci.yml'

variables:
    ARTIFACTORY_DEV_REPO: dpd-svt-generic-dev
    ARTIFACTORY_RC_REPO: dpd-svt-generic-rc
    PROJECT_NAME: SVT_PTCC
    ARTIFACT_TYPE: zip  # тип артефакта
    PROJECT_BUILD_DIR: out # папка для сборки проекта
    FILE_ARTIFACT_PATH: "out/release.zip" # путь к собранному архиву
    OWASP_DISABLE_EXPERIMENTAL: "TRUE"

build:
    image: repo.dev002.local/devops-svd-runner-docker-dev/ssh:1.0.0
    stage:
      build
    tags:
      - docker_fct_dev
    variables:
      # создаем уникальный путь для каждого коммита и для каждой job'ы. Эта папка будет на твоей удалённой машине на которой ты будешь собирать проект
      WIN_BUILD_DIR: C:\\src\\SVT\\$CI_PROJECT_NAME\\$CI_COMMIT_SHORT_SHA\\$CI_JOB_ID
    before_script:
      # Создаем ключ для подключения к Windows серверу.
      - mkdir ~/.ssh && chmod 700 ~/.ssh && echo $SSH_BASE64_KEY | base64 -d > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
      # Создаем временную папку для сборки
      - echo "Create $WIN_BUILD_DIR"
      - ssh $BUILD_USER@$SERVER_ADDRESS -o StrictHostKeyChecking=no mkdir $WIN_BUILD_DIR
      # Копируем во временную папку все содержимое из репозитория
      - scp -r ./* $BUILD_USER@$SERVER_ADDRESS:$WIN_BUILD_DIR
    script:
      # Запускаем скрипт сборки
      - if [ "$CI_COMMIT_BRANCH" == "" ]; then CI_COMMIT_BRANCH="empty_branch"; fi
      - ssh $BUILD_USER@$SERVER_ADDRESS powershell $WIN_BUILD_DIR\\build_script.ps1 -br $CI_COMMIT_BRANCH
      # Скачиваем необходимые файлы на раннер
      - mkdir $PROJECT_BUILD_DIR
      - scp -r $BUILD_USER@$SERVER_ADDRESS:$WIN_BUILD_DIR\\\\$PROJECT_BUILD_DIR\\ ./
    after_script:
      # Удаляем временную папку
      - ssh $BUILD_USER@$SERVER_ADDRESS -o StrictHostKeyChecking=no rmdir $WIN_BUILD_DIR /s /q
    artifacts:
      paths:
        - $FILE_ARTIFACT_PATH
      expire_in: 2 days

deploy_dev:
    image: repo.dev002.local/devops-svd-runner-docker-dev/ssh:1.0.0
    stage:
      deploy-dev
    tags:
      - docker_fct_dev
    variables:
      WIN_RELEASE_DIR: C:\\releases\\$CI_PROJECT_NAME\\
    rules:
      - if: '$MANUAL_RUN_DEPLOY == "true"'
        when: on_success
      - if: '$CI_COMMIT_BRANCH == "master"'
        when: on_success
      - if: '$CI_COMMIT_BRANCH == "dev"'
        when: on_success
      - when: never

    before_script:
        #Получаем путь до артифакта
        #HACK Скачивание не проходит по TLS, пришлось заменить
        # Необходимо следить за хостом Артифатори!!!
        - export ARTIFACTORY_URL="http://repo.dev002.local/$ARTIFACT_PATH"
        # Создаем ключ для подключения к Windows серверу.
        - mkdir ~/.ssh && chmod 700 ~/.ssh && echo $SSH_BASE64_KEY | base64 -d > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
        # Копируем на сервер скрипт релиза
        - scp -o StrictHostKeyChecking=no -r ./release_script.ps1 $BUILD_USER@$DEV_APP_SERVER_ADDRESS:$WIN_RELEASE_DIR
    script:
        # Запускаем скрипт установки
        - if [ "$CI_COMMIT_BRANCH" == "" ]; then CI_COMMIT_BRANCH="empty_branch"; fi
        - ssh $BUILD_USER@$DEV_APP_SERVER_ADDRESS \
            powershell $WIN_RELEASE_DIR\\release_script.ps1 \
                -u $ARTIFACTORY_LOGIN \
                -p $ARTIFACTORY_PASSWORD \
                -url $ARTIFACTORY_URL \
                -br $CI_COMMIT_BRANCH \
                -sqlUser $SQL_USER \
                -sqlPass $SQL_PASS



